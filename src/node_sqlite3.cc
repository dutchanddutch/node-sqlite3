#include <stdint.h>
#include <sstream>
#include <cstring>
#include <string>
#include <sqlite3.h>

#include "macros.h"
#include "database.h"
#include "statement.h"

using namespace node_sqlite3;

namespace {

NAN_MODULE_INIT(RegisterModule) {
    Nan::HandleScope scope;

    Database::Init(target);
    Statement::Init(target);

    DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READONLY, OPEN_READONLY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_READWRITE, OPEN_READWRITE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_OPEN_CREATE, OPEN_CREATE);
    DEFINE_CONSTANT_STRING(target, SQLITE_VERSION, VERSION);
#ifdef SQLITE_SOURCE_ID
    DEFINE_CONSTANT_STRING(target, SQLITE_SOURCE_ID, SOURCE_ID);
#endif
    DEFINE_CONSTANT_INTEGER(target, SQLITE_VERSION_NUMBER, VERSION_NUMBER);

    DEFINE_CONSTANT_INTEGER(target, SQLITE_OK, OK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_ERROR, ERROR);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_INTERNAL, INTERNAL);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_PERM, PERM);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_ABORT, ABORT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_BUSY, BUSY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_LOCKED, LOCKED);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOMEM, NOMEM);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY, READONLY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_INTERRUPT, INTERRUPT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR, IOERR);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CORRUPT, CORRUPT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTFOUND, NOTFOUND);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_FULL, FULL);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN, CANTOPEN);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_PROTOCOL, PROTOCOL);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_EMPTY, EMPTY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_SCHEMA, SCHEMA);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_TOOBIG, TOOBIG);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT, CONSTRAINT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_MISMATCH, MISMATCH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_MISUSE, MISUSE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOLFS, NOLFS);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_AUTH, AUTH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_FORMAT, FORMAT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_RANGE, RANGE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTADB, NOTADB);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTICE, NOTICE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_WARNING, WARNING);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_ROW, ROW);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_DONE, DONE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_READ, IOERR_READ);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SHORT_READ, IOERR_SHORT_READ);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_WRITE, IOERR_WRITE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_FSYNC, IOERR_FSYNC);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_DIR_FSYNC, IOERR_DIR_FSYNC);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_TRUNCATE, IOERR_TRUNCATE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_FSTAT, IOERR_FSTAT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_UNLOCK, IOERR_UNLOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_RDLOCK, IOERR_RDLOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_DELETE, IOERR_DELETE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_BLOCKED, IOERR_BLOCKED);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_NOMEM, IOERR_NOMEM);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_ACCESS, IOERR_ACCESS);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_CHECKRESERVEDLOCK, IOERR_CHECKRESERVEDLOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_LOCK, IOERR_LOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_CLOSE, IOERR_CLOSE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_DIR_CLOSE, IOERR_DIR_CLOSE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SHMOPEN, IOERR_SHMOPEN);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SHMSIZE, IOERR_SHMSIZE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SHMLOCK, IOERR_SHMLOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SHMMAP, IOERR_SHMMAP);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_SEEK, IOERR_SEEK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_DELETE_NOENT, IOERR_DELETE_NOENT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_MMAP, IOERR_MMAP);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_GETTEMPPATH, IOERR_GETTEMPPATH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_CONVPATH, IOERR_CONVPATH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_VNODE, IOERR_VNODE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_IOERR_AUTH, IOERR_AUTH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_LOCKED_SHAREDCACHE, LOCKED_SHAREDCACHE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_BUSY_RECOVERY, BUSY_RECOVERY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_BUSY_SNAPSHOT, BUSY_SNAPSHOT);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN_NOTEMPDIR, CANTOPEN_NOTEMPDIR);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN_ISDIR, CANTOPEN_ISDIR);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN_FULLPATH, CANTOPEN_FULLPATH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CANTOPEN_CONVPATH, CANTOPEN_CONVPATH);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CORRUPT_VTAB, CORRUPT_VTAB);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY_RECOVERY, READONLY_RECOVERY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY_CANTLOCK, READONLY_CANTLOCK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY_ROLLBACK, READONLY_ROLLBACK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_READONLY_DBMOVED, READONLY_DBMOVED);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_ABORT_ROLLBACK, ABORT_ROLLBACK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_CHECK, CONSTRAINT_CHECK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_COMMITHOOK, CONSTRAINT_COMMITHOOK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_FOREIGNKEY, CONSTRAINT_FOREIGNKEY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_FUNCTION, CONSTRAINT_FUNCTION);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_NOTNULL, CONSTRAINT_NOTNULL);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_PRIMARYKEY, CONSTRAINT_PRIMARYKEY);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_TRIGGER, CONSTRAINT_TRIGGER);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_UNIQUE, CONSTRAINT_UNIQUE);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_VTAB, CONSTRAINT_VTAB);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_CONSTRAINT_ROWID, CONSTRAINT_ROWID);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTICE_RECOVER_WAL, NOTICE_RECOVER_WAL);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_NOTICE_RECOVER_ROLLBACK, NOTICE_RECOVER_ROLLBACK);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_WARNING_AUTOINDEX, WARNING_AUTOINDEX);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_AUTH_USER, AUTH_USER);
    DEFINE_CONSTANT_INTEGER(target, SQLITE_OK_LOAD_PERMANENTLY, OK_LOAD_PERMANENTLY);
}

}

const char* sqlite_code_string(int code) {
    switch (code) {
        case SQLITE_OK:         return "SQLITE_OK";
        case SQLITE_ERROR:	return "SQLITE_ERROR";
        case SQLITE_INTERNAL:	return "SQLITE_INTERNAL";
        case SQLITE_PERM:	return "SQLITE_PERM";
        case SQLITE_ABORT:	return "SQLITE_ABORT";
        case SQLITE_BUSY:	return "SQLITE_BUSY";
        case SQLITE_LOCKED:	return "SQLITE_LOCKED";
        case SQLITE_NOMEM:	return "SQLITE_NOMEM";
        case SQLITE_READONLY:	return "SQLITE_READONLY";
        case SQLITE_INTERRUPT:	return "SQLITE_INTERRUPT";
        case SQLITE_IOERR:	return "SQLITE_IOERR";
        case SQLITE_CORRUPT:	return "SQLITE_CORRUPT";
        case SQLITE_NOTFOUND:	return "SQLITE_NOTFOUND";
        case SQLITE_FULL:	return "SQLITE_FULL";
        case SQLITE_CANTOPEN:	return "SQLITE_CANTOPEN";
        case SQLITE_PROTOCOL:	return "SQLITE_PROTOCOL";
        case SQLITE_EMPTY:	return "SQLITE_EMPTY";
        case SQLITE_SCHEMA:	return "SQLITE_SCHEMA";
        case SQLITE_TOOBIG:	return "SQLITE_TOOBIG";
        case SQLITE_CONSTRAINT:	return "SQLITE_CONSTRAINT";
        case SQLITE_MISMATCH:	return "SQLITE_MISMATCH";
        case SQLITE_MISUSE:	return "SQLITE_MISUSE";
        case SQLITE_NOLFS:	return "SQLITE_NOLFS";
        case SQLITE_AUTH:	return "SQLITE_AUTH";
        case SQLITE_FORMAT:	return "SQLITE_FORMAT";
        case SQLITE_RANGE:	return "SQLITE_RANGE";
        case SQLITE_NOTADB:	return "SQLITE_NOTADB";
        case SQLITE_NOTICE:	return "SQLITE_NOTICE";
        case SQLITE_WARNING:	return "SQLITE_WARNING";
        case SQLITE_ROW:	return "SQLITE_ROW";
        case SQLITE_DONE:	return "SQLITE_DONE";
        case SQLITE_IOERR_READ:	return "SQLITE_IOERR_READ";
        case SQLITE_IOERR_SHORT_READ:	return "SQLITE_IOERR_SHORT_READ";
        case SQLITE_IOERR_WRITE:	return "SQLITE_IOERR_WRITE";
        case SQLITE_IOERR_FSYNC:	return "SQLITE_IOERR_FSYNC";
        case SQLITE_IOERR_DIR_FSYNC:	return "SQLITE_IOERR_DIR_FSYNC";
        case SQLITE_IOERR_TRUNCATE:	return "SQLITE_IOERR_TRUNCATE";
        case SQLITE_IOERR_FSTAT:	return "SQLITE_IOERR_FSTAT";
        case SQLITE_IOERR_UNLOCK:	return "SQLITE_IOERR_UNLOCK";
        case SQLITE_IOERR_RDLOCK:	return "SQLITE_IOERR_RDLOCK";
        case SQLITE_IOERR_DELETE:	return "SQLITE_IOERR_DELETE";
        case SQLITE_IOERR_BLOCKED:	return "SQLITE_IOERR_BLOCKED";
        case SQLITE_IOERR_NOMEM:	return "SQLITE_IOERR_NOMEM";
        case SQLITE_IOERR_ACCESS:	return "SQLITE_IOERR_ACCESS";
        case SQLITE_IOERR_CHECKRESERVEDLOCK:	return "SQLITE_IOERR_CHECKRESERVEDLOCK";
        case SQLITE_IOERR_LOCK:	return "SQLITE_IOERR_LOCK";
        case SQLITE_IOERR_CLOSE:	return "SQLITE_IOERR_CLOSE";
        case SQLITE_IOERR_DIR_CLOSE:	return "SQLITE_IOERR_DIR_CLOSE";
        case SQLITE_IOERR_SHMOPEN:	return "SQLITE_IOERR_SHMOPEN";
        case SQLITE_IOERR_SHMSIZE:	return "SQLITE_IOERR_SHMSIZE";
        case SQLITE_IOERR_SHMLOCK:	return "SQLITE_IOERR_SHMLOCK";
        case SQLITE_IOERR_SHMMAP:	return "SQLITE_IOERR_SHMMAP";
        case SQLITE_IOERR_SEEK:	return "SQLITE_IOERR_SEEK";
        case SQLITE_IOERR_DELETE_NOENT:	return "SQLITE_IOERR_DELETE_NOENT";
        case SQLITE_IOERR_MMAP:	return "SQLITE_IOERR_MMAP";
        case SQLITE_IOERR_GETTEMPPATH:	return "SQLITE_IOERR_GETTEMPPATH";
        case SQLITE_IOERR_CONVPATH:	return "SQLITE_IOERR_CONVPATH";
        case SQLITE_IOERR_VNODE:	return "SQLITE_IOERR_VNODE";
        case SQLITE_IOERR_AUTH:	return "SQLITE_IOERR_AUTH";
        case SQLITE_LOCKED_SHAREDCACHE:	return "SQLITE_LOCKED_SHAREDCACHE";
        case SQLITE_BUSY_RECOVERY:	return "SQLITE_BUSY_RECOVERY";
        case SQLITE_BUSY_SNAPSHOT:	return "SQLITE_BUSY_SNAPSHOT";
        case SQLITE_CANTOPEN_NOTEMPDIR:	return "SQLITE_CANTOPEN_NOTEMPDIR";
        case SQLITE_CANTOPEN_ISDIR:	return "SQLITE_CANTOPEN_ISDIR";
        case SQLITE_CANTOPEN_FULLPATH:	return "SQLITE_CANTOPEN_FULLPATH";
        case SQLITE_CANTOPEN_CONVPATH:	return "SQLITE_CANTOPEN_CONVPATH";
        case SQLITE_CORRUPT_VTAB:	return "SQLITE_CORRUPT_VTAB";
        case SQLITE_READONLY_RECOVERY:	return "SQLITE_READONLY_RECOVERY";
        case SQLITE_READONLY_CANTLOCK:	return "SQLITE_READONLY_CANTLOCK";
        case SQLITE_READONLY_ROLLBACK:	return "SQLITE_READONLY_ROLLBACK";
        case SQLITE_READONLY_DBMOVED:	return "SQLITE_READONLY_DBMOVED";
        case SQLITE_ABORT_ROLLBACK:	return "SQLITE_ABORT_ROLLBACK";
        case SQLITE_CONSTRAINT_CHECK:	return "SQLITE_CONSTRAINT_CHECK";
        case SQLITE_CONSTRAINT_COMMITHOOK:	return "SQLITE_CONSTRAINT_COMMITHOOK";
        case SQLITE_CONSTRAINT_FOREIGNKEY:	return "SQLITE_CONSTRAINT_FOREIGNKEY";
        case SQLITE_CONSTRAINT_FUNCTION:	return "SQLITE_CONSTRAINT_FUNCTION";
        case SQLITE_CONSTRAINT_NOTNULL:	return "SQLITE_CONSTRAINT_NOTNULL";
        case SQLITE_CONSTRAINT_PRIMARYKEY:	return "SQLITE_CONSTRAINT_PRIMARYKEY";
        case SQLITE_CONSTRAINT_TRIGGER:	return "SQLITE_CONSTRAINT_TRIGGER";
        case SQLITE_CONSTRAINT_UNIQUE:	return "SQLITE_CONSTRAINT_UNIQUE";
        case SQLITE_CONSTRAINT_VTAB:	return "SQLITE_CONSTRAINT_VTAB";
        case SQLITE_CONSTRAINT_ROWID:	return "SQLITE_CONSTRAINT_ROWID";
        case SQLITE_NOTICE_RECOVER_WAL:	return "SQLITE_NOTICE_RECOVER_WAL";
        case SQLITE_NOTICE_RECOVER_ROLLBACK:	return "SQLITE_NOTICE_RECOVER_ROLLBACK";
        case SQLITE_WARNING_AUTOINDEX:	return "SQLITE_WARNING_AUTOINDEX";
        case SQLITE_AUTH_USER:	return "SQLITE_AUTH_USER";
        case SQLITE_OK_LOAD_PERMANENTLY:	return "SQLITE_OK_LOAD_PERMANENTLY";
        default:                return "UNKNOWN";
    }
}

const char* sqlite_authorizer_string(int type) {
    switch (type) {
        case SQLITE_INSERT:     return "insert";
        case SQLITE_UPDATE:     return "update";
        case SQLITE_DELETE:     return "delete";
        default:                return "";
    }
}

NODE_MODULE(node_sqlite3, RegisterModule)
